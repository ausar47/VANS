; vans_cxl.cfg - Sample configuration for VANS with CXL memory simulation

[global]
tick_frequency = 1000000000 ; 1 GHz (1 tick = 1 ns)

[rmc]
type = rmc
queue_size = 64
read_latency = 1
write_latency = 1
max_read_queue_size = 64
max_write_queue_size = 64
max_total_queue_size = 128
refresh_cycle = 0

; Existing IMC configuration (optional, can be replaced by CXL directly)
; For now, let's connect RMC to a CXL Switch
[imc]
type = imc
queue_size = 32

; New section for CXL Switch
[cxl_switch]
type = cxl_switch
latency = 50       ; Example latency in ns for crossing the switch
bandwidth_gb_s = 64 ; Example bandwidth for the CXL link in GB/s
queue_size = 32    ; Size of internal request queue in the switch
; Additional parameters for CXL Switch can be added here if needed

; New section for CXL Memory Device
[cxl_mem_device]
type = cxl_mem_device
read_latency = 120   ; Example read latency in ns for the CXL memory
write_latency = 100  ; Example write latency in ns for the CXL memory
size_gb = 128        ; Capacity of the CXL memory device in GB
read_queue_size = 32
write_queue_size = 32
; The CXLMemDevice internally uses a DRAMMemory backend, so we don't need
; to define that here explicitly unless we want to override its parameters.
; For now, it will use default parameters or inherit from the CXLMemDevice's name.

; Define the memory hierarchy
[organization]
rmc : 1 * cxl_switch
cxl_switch : 1 * cxl_mem_device

; Dump settings
[dump]
stats_file = vans_cxl_stats.txt
config_file = vans_cxl_config.txt
command_file = vans_cxl_commands.txt
trace_file = vans_cxl_trace.txt

; Trace settings
[trace]
heart_beat_epoch = 1000000 ; Every 1 million ticks
report_epoch = 10000000    ; Every 10 million ticks
trace_file = traces/test_trace.trc ; Placeholder for a trace file